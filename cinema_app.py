#Import des librairies Python n√©cessaires

import pandas as pd
import numpy as np 
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.figure_factory as ff
import matplotlib.pyplot as plt
import streamlit as st
import folium
from folium import plugins
from streamlit_folium import st_folium
from PIL import Image

#Configuration de l'appication Streamlit : Titre, ic√¥ne, mise en page
st.set_page_config(page_title="Cin√©mas de France", page_icon="üçø", layout="centered")

#Import du jeu de donn√©es 
dataset = pd.read_excel("dataset.xlsx")


#Ce sidebar contient le menu et une br√®ve description de l'application 

with st.sidebar:
    popcorn_logo = Image.open('popcorn.png')
    st.image(popcorn_logo, width=200)

    st.title("Les cin√©mas de France")

    #Sauter la ligne 
    st.markdown('##')

    menu = st.selectbox("Menu",("Statistiques", "Distribution des donn√©es", "Carte int√©ractive"))

    st.markdown('##')

    st.markdown("Cette application explore les donn√©es des cin√©mas de la France m√©tropolitaine. Elle pr√©sente les statistiques, la distribution des variables retenues et une carte interactive.<br></br> R√©alis√©e par <strong style=color:#FF1919;> Walid GOUMI</strong>",unsafe_allow_html=True)

    st.markdown('##')

    efrei_logo = Image.open('LOGO_EFREI-PRINT_EFREI-WEB.png')
    st.image(efrei_logo, width=150)


#Premi√®re page
if menu == 'Statistiques':
    st.header("üìà Statistiques")

    st.subheader("Le jeu de donn√©es")
    st.markdown("Le jeu de donn√©es a √©t√© produit par le <b>Centre national du cin√©ma et de l'image anim√©e</b>. Il comporte 2041 lignes qui correspondent aux cin√©mas de la France m√©tropolitaine. Certains cin√©mas sont peut-√™tre manquants mais cela rel√®ve de la collecte de donn√©es par le producteur. Je l'ai compl√©t√© manuellement par l'acceptabilit√©  des cartes d'abonnement aux cin√©mas les plus utilis√©es, la carte UGC et la carte Cinepass (Path√©).", unsafe_allow_html=True )
    st.markdown("Source du jeu de donn√©es : https://www.data.gouv.fr/fr/datasets/r/cdb918e7-7f1a-44fc-bf6f-c59d1614ed6d ")
    st.markdown("Source des donn√©es concernant les cartes d'abonnement : https://salles-cinema.com/")
   
    st.markdown('##')

    list_cinema = dataset['nom'].tolist() #contient la liste des cin√©mas stock√©s dans la variable "nom"
    selected_cinema = st.multiselect('Rechercher un cin√©ma', sorted(list_cinema))
    all_optionscine = st.checkbox("Cocher pour tout s√©lectionner", value=True)

    #Renvoyer une erreur si aucun cin√©ma n'est s√©lectionn√©
    if all_optionscine:
        selected_cinema = list_cinema
    elif not selected_cinema:
        st.error(
            "Veuillez s√©lectionner un ou plusieurs cin√©mas dans le bandeau de s√©lection")

    dfcinema = dataset.loc[dataset['nom'].isin(selected_cinema)]
    
    st.write(dfcinema)

    st.markdown("##")
    st.subheader("La description statistique du jeu de donn√©es")

    st.write(dataset.describe())

    st.markdown("##")
    st.subheader("Repr√©sentation de la corr√©lation entre les variables quantitatives ")
    corr_heatmap = px.imshow(dataset[['population de la commune (2015)','population unit√© urbaine (2015)','√©crans','fauteuils','s√©ances 2020','entr√©es 2020', 'entr√©es 2019','nombre de films programm√©s 2020','nombre de films programm√©s 2020','nombre de films in√©dits 2020']].corr(), 
                  text_auto=False)
    st.plotly_chart(corr_heatmap,use_container_width=True)
    

#Deuxi√®me page
elif menu == 'Distribution des donn√©es':
    st.header("üé¨  Distribution des donn√©es")

    st.markdown('##')
    st.subheader("Analyse de l'activit√© des salles de cin√©ma")

    """ 
    entree = Les entr√©es au cin√©ma
    seance = Les s√©ances de cin√©ma
    """
    #Configurer deux colonnes pour les deux m√©triques qu'on s'appr√™te √† calculer
    col1_entree, col2_seances = st.columns(2)
    col1_entree.metric("Nombre d'entr√©es 2020", dataset['entr√©es 2020'].sum(),
     "{0:.2f}".format(dataset['√©volution entr√©es 2020/2019'].mean()))
    col2_seances.metric("Nombre de s√©ances 2020", dataset['s√©ances 2020'].sum())


    options_entree = ["entr√©es 2020","entr√©es 2019"]
    select_entree = st.multiselect("S√©lectionner une variable : ", options_entree,default='entr√©es 2020')

    if select_entree : 
        dataset[select_entree].fillna(0, inplace = True)
        entree_cinema = px.bar(
            dataset.sort_values(by=select_entree, ascending=False)[:20], 
            x='nom', 
            y=select_entree,
            title='Top 20 des cin√©mas par nombre d\'entr√©es')

        entree_cinema.update_layout(barmode='group')

        st.plotly_chart(entree_cinema, use_container_width=True)
        st.markdown("Le nombre d'entr√©e aux cin√©mas a baiss√© en 2020. La Covid est l'une des raisons pouvant expliquer cette baisse. <br> </br><b>UGC CINE CITE LES HALLES</b> est le cin√©ma dont le nombre d'entr√©es est le plus √©lev√© suivi du <b>KINEPOLIS</b>.",unsafe_allow_html=True)
    else:
        st.error('Aucun √©l√©ment selectionn√©')

    seances_cine = px.bar(
        dataset.sort_values(by='s√©ances 2020', ascending=False)[:20], 
        x='nom', 
        y='s√©ances 2020', 
        text_auto=True,
        title='Top 20 des cin√©mas par nombre de s√©ances en 2020')

    seances_cine.update_traces(marker_color='red')

    st.plotly_chart(seances_cine,use_container_width=True)

    

    st.markdown('##')
    st.subheader("Analyse des √©quipements des salles de cin√©ma")

    list_equip = ["√©crans", "fauteuils"]
    selected_equip = st.selectbox("S√©lectionner un √©quipement : ", list_equip)

    equip_fig = px.bar(
    dataset.sort_values(by=selected_equip, ascending=False)[:20], 
    x='nom', 
    y=selected_equip,
    text_auto=True,
    title='Nombre de {} par cin√©ma'.format(selected_equip))

    equip_fig.update_traces(marker_color='red')
    
    st.plotly_chart(equip_fig, use_container_width=True)

    st.markdown("##")

    #R√©partition des caract√©ristiques techniques des cin√©mas
    st.subheader("Les caract√©ristiques techniques")

    list_caract = ["genre", "multiplexe","Art et Essai"]
    selected_caract = st.selectbox("S√©lectionner une caract√©ristique : ", list_caract)

    #D√©finir un commentaire pour chaque s√©lection
    if selected_caract == "genre":
        st.markdown("La quasi totalit√© des cin√©mas sont fixes √† hauteur de 95%.")
    elif selected_caract =="multiplexe":
        st.markdown("La majorit√© des cin√©mas disposent de plusieurs √©crans √† hauteur de 89%")
    else :
        st.markdown("Seulement '60%' des cin√©mas de France disposent de la mention Art et Essai et proposent des films ind√©pendants.")


    fig_caract = px.pie(dataset.groupby(selected_caract, as_index=False)['nom'].count(), 
               values='nom', 
               names=selected_caract)

    st.plotly_chart(fig_caract,use_container_width=True )

    st.markdown("##")
    
    # R√©partition des abonnements UGC et CINEPASS respectivement
    st.subheader("Les abonnements")

    list_carte = ["carte ugc", "cinepass"]
    selected_carte = st.selectbox("S√©lectionner un abonnement : ", list_carte)

    fig_carte = px.pie(dataset.groupby(selected_carte, as_index=False)['nom'].count(), 
    values='nom', 
    names=selected_carte)

    st.plotly_chart(fig_carte,use_container_width=True )


    #Cr√©ation d'un dataframe pour analyse par r√©gion 
    df_region = pd.DataFrame(dataset.groupby('r√©gion administrative', as_index=False)['√©crans', 'fauteuils'].sum())

    #Cr√©ation d'un datefrome pour compter le nombre de cin√©mas par r√©gion
    df_region1 = pd.DataFrame(dataset.groupby('r√©gion administrative', as_index=False)['nom'].count())

    #Jointure des deux dataframe pr√©centes pour obtenir le nb d'√©crans, fauteils et cin√©mas par r√©gion 
    df_region2 = df_region.set_index('r√©gion administrative').join(df_region1.set_index('r√©gion administrative'))

    df_region2.rename(columns = {'nom':'nombre de cin√©mas'}, inplace = True)

    df_reg = df_region2.reset_index()

    #R√©√©crire le nom des r√©gions pour pouvoir r√©aliser la jointure avec le fichier geojson des r√©gions de France qui contient les coordonn√©es g√©ographiques
    df_reg['r√©gions'] = df_reg['r√©gion administrative'].map({'AUVERGNE / RHONE-ALPES':'Auvergne-Rh√¥ne-Alpes',
                                                                                'BOURGOGNE / FRANCHE-COMTE':'Bourgogne-Franche-Comt√©',
                                                                                'BRETAGNE':'Bretagne',
                                                                                'CENTRE-VAL DE LOIRE':'Centre-Val de Loire',
                                                                                'CORSE':'Corse',
                                                                                'GRAND EST':'Grand Est',
                                                                                'HAUTS DE FRANCE':'Hauts-de-France',
                                                                                'ILE-DE-FRANCE':'√éle-de-France',
                                                                                'NORMANDIE':'Normandie',
                                                                                'NOUVELLE AQUITAINE':'Nouvelle-Aquitaine',
                                                                                'OCCITANIE':'Occitanie',
                                                                                'PAYS DE LA LOIRE':'Pays de la Loire',
                                                                                'PROVENCE-ALPES-COTE D\'AZUR':'Provence-Alpes-C√¥te d\'Azur',
                                                                                np.nan:'NY'},na_action=None)
    
    #import de la librairie geopandas non import√© auparavant pour traiter le fichier geojson
    import geopandas as gpd
    regions = gpd.read_file('regions.geojson')
    regions1 = regions.set_index('nom').join(df_reg.set_index('r√©gions'))
    regions2 =regions1.reset_index()

    st.markdown('##')
    st.subheader("Analyse par r√©gion")

    list_var= ["nombre de cin√©mas","√©crans", "fauteuils"]
    selected_var = st.selectbox("S√©lectionner une variable : ", list_var)

    #R√©partition des variables choisies par r√©gion de France
    region_map = folium.Map(
                location=[46.8534, 2.3488],
                zoom_start=6)

    if selected_var == "nombre de cin√©mas":
        color_var = "YlGn"
    elif selected_var == "√©crans":
        color_var = "OrRd"
    else :
        color_var = "BuPu"

    reg_cinema = folium.Choropleth(
    columns=['r√©gions', selected_var],
    data=df_reg,
    key_on='feature.properties.nom',
    legend_name=selected_var,
    fill_color=color_var,
    fill_opacity=0.7,
    line_opacity=.1,
    geo_data=regions2,
    name='Nombre de cin√©mas par r√©gion',
    ).add_to(region_map)

    style_function = "font-size: 14px; font-weight:"
    reg_cinema.geojson.add_child(
        folium.features.GeoJsonTooltip(fields= ['nom',selected_var], style=style_function, labels=True,sticky=True, aliases = ['R√©gion :',"{} : ".format(selected_var)]))

    #Afficher la carte dans streamlit
    st_folium(region_map, width=700)

    #Cr√©er une table 
    st.table(df_reg[['r√©gions',selected_var]].sort_values(by=selected_var, ascending=False))

#3√®me page : objectif de l'application
else:
    st.header("üó∫Ô∏è Carte int√©ractive")

    with st.container():
        st.markdown("Vous pouvez visualiser les cin√©mas d'une ou plusieurs localit√©s. En passant le pointeur sur le marqueur rouge, il vous est possible de consulter les informations li√©es √† un cin√©ma.")

        #s√©lectionner une commune
        list_commune = dataset['commune'].unique().tolist() #contient la liste des communes stock√©es dans la variable "commune"
        selected_commune = st.multiselect('Rechercher une localit√©', sorted(list_commune))
        all_optionscom = st.checkbox("Cocher pour tout s√©lectionner", value=True)
        st.write("Vous avez s√©lectionn√©", len(selected_commune), 'localit√©(s)')

        if all_optionscom:
            selected_commune = list_commune
        elif not selected_commune:
            st.error(
                "Veuillez s√©lectionner une ou plusieurs localit√©s dans le bandeau de s√©lection")
            st.stop()

        #Cr√©ation d'un nouvel dataset pour afficher les communes s√©lectionn√©es 
        dfcommune = dataset.loc[dataset['commune'].isin(selected_commune)]

        st.markdown('##')
        #Configurer les colonnes streamlit pour affichage des m√©triques
        col1_cine, col2_ecran, col3_fauteuil = st.columns(3)
        col1_cine.metric("Nombre de cin√©mas", dfcommune['nom'].count())
        col2_ecran.metric("Nombre d'√©crans", dfcommune['√©crans'].sum())
        col3_fauteuil.metric("Nombre de fauteuils", dfcommune['fauteuils'].sum())

        st.markdown('##')
        #S√©lectionner un cin√©ma

        cinemas_france2 = folium.Map(
                location=[46.8534, 2.3488],
                zoom_start=6)

        #Ce plugin import√© au d√©but permet de regrouper les cin√©mas en Cluster selon la proximit√© g√©ographique 
        cluster = plugins.MarkerCluster(name='Cin√©mas de France')

        cinemas_france2.add_child(cluster)

        for lat,lon,name,tip1,tip2,ecrans,fauteuils, commune in zip(dfcommune['latitude'], dfcommune['longitude'], dfcommune['nom'], dfcommune['carte ugc'],dfcommune['cinepass'], dfcommune['√©crans'], dfcommune['fauteuils'], dfcommune['commune']):
            tooltip_text = '<i><b>Commune :</b></i> {}<br></br><b>Cin√©ma :</b> {}<br></br><b>Ecrans :</b> {}<br></br><b>Fauteuils :</b> {}<br></br><b>Carte UGC :</b> {}<br></br><b>Cinepass</b> : {}'.format(commune,name, ecrans, fauteuils, tip1, tip2)
            #Cr√©er un marqueur avec une icone "film"
            folium.Marker(
                location=[lat,lon], 
                tooltip = tooltip_text,icon=folium.Icon(color='red', icon='film', 
                prefix='fa')).add_to(cluster)


        st_folium(cinemas_france2, width=700)
        st.markdown('##')
        st.subheader("Explorer le d√©tail des cin√©mas")

        list_cinema2 = dfcommune['nom'].tolist()
        selected_cinema2 = st.multiselect('S√©lectionner un cin√©ma', sorted(list_cinema2))
        all_optionscine2 = st.checkbox("Tout s√©lectionner", value=True)

        if all_optionscine2:
            selected_cinema2 = list_cinema2
        elif not selected_cinema2:
            st.error(
                "Veuillez s√©lectionner un ou plusieurs cin√©mas dans le bandeau de s√©lection")
            st.stop()

        dfcinema2 = dfcommune.loc[(dfcommune['commune'].isin(selected_commune)) & (dfcommune['nom'].isin(selected_cinema2)) ]

        st.write(dfcinema2[['nom','commune','√©crans','fauteuils','carte ugc','cinepass','Art et Essai','multiplexe']])

      



        
